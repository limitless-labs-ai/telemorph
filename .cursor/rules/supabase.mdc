---
description: When working with Supabase follow these guidelines:
globs: 
alwaysApply: false
---
Be careful when protecting pages. The server gets the user session from the cookies, which can be spoofed by anyone.

Always use supabase.auth.getUser() to protect pages and user data.

Never trust supabase.auth.getSession() inside server code such as middleware. It isn't guaranteed to revalidate the Auth token.

It's safe to trust getUser() because it sends a request to the Supabase Auth server every time to revalidate the Auth token.

Use [client.ts](mdc:src/utils/supabase/client.ts) or [server.ts](mdc:src/utils/supabase/server.ts) to create a Supabase Client. 

e.g.
import { createClient } from "@/utils/supabase/server";
const supabase = await createClient(); 

# Storage Documentation
Create a bucket
Creates a new Storage bucket

RLS policy permissions required:
buckets table permissions: insert
objects table permissions: none
Refer to the Storage guide on how access control works
Parameters
id
Required
string
A unique identifier for the bucket you are creating.

options
Required
object
Details
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Create bucket

const { data, error } = await supabase
  .storage
  .createBucket('avatars', {
    public: false,
    allowedMimeTypes: ['image/png'],
    fileSizeLimit: 1024
  })

Response
Retrieve a bucket
Retrieves the details of an existing Storage bucket.

RLS policy permissions required:
buckets table permissions: select
objects table permissions: none
Refer to the Storage guide on how access control works
Parameters
id
Required
string
The unique identifier of the bucket you would like to retrieve.

Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Get bucket
const { data, error } = await supabase
  .storage
  .getBucket('avatars')
Response
List all buckets
Retrieves the details of all Storage buckets within an existing project.

RLS policy permissions required:
buckets table permissions: select
objects table permissions: none
Refer to the Storage guide on how access control works
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
List buckets
const { data, error } = await supabase
  .storage
  .listBuckets()
Response
Update a bucket
Updates a Storage bucket

RLS policy permissions required:
buckets table permissions: select and update
objects table permissions: none
Refer to the Storage guide on how access control works
Parameters
id
Required
string
A unique identifier for the bucket you are updating.

options
Required
object
Details
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Update bucket
const { data, error } = await supabase
  .storage
  .updateBucket('avatars', {
    public: false,
    allowedMimeTypes: ['image/png'],
    fileSizeLimit: 1024
  })
Response
Delete a bucket
Deletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first empty() the bucket.

RLS policy permissions required:
buckets table permissions: select and delete
objects table permissions: none
Refer to the Storage guide on how access control works
Parameters
id
Required
string
The unique identifier of the bucket you would like to delete.

Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Delete bucket
const { data, error } = await supabase
  .storage
  .deleteBucket('avatars')
Response
Empty a bucket
Removes all objects inside a single bucket.

RLS policy permissions required:
buckets table permissions: select
objects table permissions: select and delete
Refer to the Storage guide on how access control works
Parameters
id
Required
string
The unique identifier of the bucket you would like to empty.

Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Empty bucket
const { data, error } = await supabase
  .storage
  .emptyBucket('avatars')
Response
Upload a file
Uploads a file to an existing bucket.

RLS policy permissions required:
buckets table permissions: none
objects table permissions: only insert when you are uploading new files and select, insert and update when you are upserting files
Refer to the Storage guide on how access control works
For React Native, using either Blob, File or FormData does not work as intended. Upload file using ArrayBuffer from base64 file data instead, see example below.
Parameters
path
Required
string
The file path, including the file name. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to upload.

fileBody
Required
FileBody
The body of the file to be stored in the bucket.

fileOptions
Optional
FileOptions
Details
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Upload file
Upload file using `ArrayBuffer` from base64 file data
const avatarFile = event.target.files[0]
const { data, error } = await supabase
  .storage
  .from('avatars')
  .upload('public/avatar1.png', avatarFile, {
    cacheControl: '3600',
    upsert: false
  })
Response
Download a file
Downloads a file from a private bucket. For public buckets, make a request to the URL returned from getPublicUrl instead.

RLS policy permissions required:
buckets table permissions: none
objects table permissions: select
Refer to the Storage guide on how access control works
Parameters
path
Required
string
The full path and file name of the file to be downloaded. For example folder/image.png.

options
Optional
object
Details
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Download file
Download file with transformations
const { data, error } = await supabase
  .storage
  .from('avatars')
  .download('folder/avatar1.png')
Response
List all files in a bucket
Lists all the files within a bucket.

RLS policy permissions required:
buckets table permissions: none
objects table permissions: select
Refer to the Storage guide on how access control works
Parameters
path
Optional
string
The folder path.

options
Optional
SearchOptions
Details
parameters
Optional
FetchParameters
Details
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
List files in a bucket
Search files in a bucket
const { data, error } = await supabase
  .storage
  .from('avatars')
  .list('folder', {
    limit: 100,
    offset: 0,
    sortBy: { column: 'name', order: 'asc' },
  })
Response
Replace an existing file
Replaces an existing file at the specified path with a new one.

RLS policy permissions required:
buckets table permissions: none
objects table permissions: update and select
Refer to the Storage guide on how access control works
For React Native, using either Blob, File or FormData does not work as intended. Update file using ArrayBuffer from base64 file data instead, see example below.
Parameters
path
Required
string
The relative file path. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to update.

fileBody
Required
One of the following options
The body of the file to be stored in the bucket.

Details
Option 1
string
Option 2
ArrayBuffer
Option 3
ArrayBufferView
Option 4
Blob
Option 5
@types/node.Buffer
Option 6
File
Option 7
FormData
Option 8
@types/node.NodeJS.ReadableStream
Option 9
ReadableStream
Option 10
URLSearchParams
fileOptions
Optional
FileOptions
Details
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Update file
Update file using `ArrayBuffer` from base64 file data
const avatarFile = event.target.files[0]
const { data, error } = await supabase
  .storage
  .from('avatars')
  .update('public/avatar1.png', avatarFile, {
    cacheControl: '3600',
    upsert: true
  })
Response
Move an existing file
Moves an existing file to a new path in the same bucket.

RLS policy permissions required:
buckets table permissions: none
objects table permissions: update and select
Refer to the Storage guide on how access control works
Parameters
fromPath
Required
string
The original file path, including the current file name. For example folder/image.png.

toPath
Required
string
The new file path, including the new file name. For example folder/image-new.png.

options
Optional
DestinationOptions
The destination options.

Details
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Move file
const { data, error } = await supabase
  .storage
  .from('avatars')
  .move('public/avatar1.png', 'private/avatar2.png')
Response
Copy an existing file
Copies an existing file to a new path in the same bucket.

RLS policy permissions required:
buckets table permissions: none
objects table permissions: insert and select
Refer to the Storage guide on how access control works
Parameters
fromPath
Required
string
The original file path, including the current file name. For example folder/image.png.

toPath
Required
string
The new file path, including the new file name. For example folder/image-copy.png.

options
Optional
DestinationOptions
The destination options.

Details
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Copy file
const { data, error } = await supabase
  .storage
  .from('avatars')
  .copy('public/avatar1.png', 'private/avatar2.png')
Response
Delete files in a bucket
Deletes files within the same bucket

RLS policy permissions required:
buckets table permissions: none
objects table permissions: delete and select
Refer to the Storage guide on how access control works
Parameters
paths
Required
Array<string>
An array of files to delete, including the path and file name. For example ['folder/image.png'].

Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Delete file
const { data, error } = await supabase
  .storage
  .from('avatars')
  .remove(['folder/avatar1.png'])
Response
Create a signed URL
Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.

RLS policy permissions required:
buckets table permissions: none
objects table permissions: select
Refer to the Storage guide on how access control works
Parameters
path
Required
string
The file path, including the current file name. For example folder/image.png.

expiresIn
Required
number
The number of seconds until the signed URL expires. For example, 60 for a URL which is valid for one minute.

options
Optional
object
Details
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Create Signed URL
Create a signed URL for an asset with transformations
Create a signed URL which triggers the download of the asset
const { data, error } = await supabase
  .storage
  .from('avatars')
  .createSignedUrl('folder/avatar1.png', 60)
Response
Create signed URLs
Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.

RLS policy permissions required:
buckets table permissions: none
objects table permissions: select
Refer to the Storage guide on how access control works
Parameters
paths
Required
Array<string>
The file paths to be downloaded, including the current file names. For example ['folder/image.png', 'folder2/image2.png'].

expiresIn
Required
number
The number of seconds until the signed URLs expire. For example, 60 for URLs which are valid for one minute.

options
Optional
object
Details
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Create Signed URLs
const { data, error } = await supabase
  .storage
  .from('avatars')
  .createSignedUrls(['folder/avatar1.png', 'folder/avatar2.png'], 60)
Response
Create signed upload URL
Creates a signed upload URL. Signed upload URLs can be used to upload files to the bucket without further authentication. They are valid for 2 hours.

RLS policy permissions required:
buckets table permissions: none
objects table permissions: insert
Refer to the Storage guide on how access control works
Parameters
path
Required
string
The file path, including the current file name. For example folder/image.png.

options
Optional
object
Details
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Create Signed Upload URL
const { data, error } = await supabase
  .storage
  .from('avatars')
  .createSignedUploadUrl('folder/cat.jpg')
Response
Upload to a signed URL
Upload a file with a token generated from createSignedUploadUrl.

RLS policy permissions required:
buckets table permissions: none
objects table permissions: none
Refer to the Storage guide on how access control works
Parameters
path
Required
string
The file path, including the file name. Should be of the format folder/subfolder/filename.png. The bucket must already exist before attempting to upload.

token
Required
string
The token generated from createSignedUploadUrl

fileBody
Required
FileBody
The body of the file to be stored in the bucket.

fileOptions
Optional
FileOptions
Details
Return Type
Promise<One of the following options>
Details
Option 1
object
Details
Option 2
object
Details
Upload to a signed URL
const { data, error } = await supabase
  .storage
  .from('avatars')
  .uploadToSignedUrl('folder/cat.jpg', 'token-from-createSignedUploadUrl', file)
Response
Retrieve public URL
A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset. This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.

The bucket needs to be set to public, either via updateBucket() or by going to Storage on supabase.com/dashboard, clicking the overflow menu on a bucket and choosing "Make public"
RLS policy permissions required:
buckets table permissions: none
objects table permissions: none
Refer to the Storage guide on how access control works
Parameters
path
Required
string
The path and name of the file to generate the public URL for. For example folder/image.png.

options
Optional
object
Details
Return Type
object
Details
Returns the URL for an asset in a public bucket
Returns the URL for an asset in a public bucket with transformations
Returns the URL which triggers the download of an asset in a public bucket
const { data } = supabase
  .storage
  .from('public-bucket')
  .getPublicUrl('folder/avatar1.png')
Response
